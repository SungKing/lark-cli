package tpl

// 枚举模板
const tplMSCEnum = `// Generated by the lark-cli {{.ToolVersion}}.  DO NOT EDIT!
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
package {{.Package}}.constant;

import lark.util.lang.Description;
import lark.util.lang.EnumValuable;
import lark.util.lang.EnumTitlable;
import lark.util.lang.Enums;

/**
 * {{.Description}}
 */
@Description("{{.Description}}")
public enum	{{.Name}} implements EnumValuable, EnumTitlable {
    {{- range $i, $f := .Fields}}
    {{- if gt $i 0}},{{end}}
    /**
     * {{.Description}}
     */
    {{.Name}}({{.Value}}, "{{.Description}}")
    {{- end}};

    private int value;
    private String title;

    private {{.Name}}(int value, String title) {
        this.value = value;
        this.title = title;
    }

    /**
     * 获取枚举的 int 值,用于数据保存以及序列化
     *
     * @return 枚举的 int 值
     */
    @Override
    public int value() {
        return this.value;
    }

    /**
     * 获取枚举的显示名称
     *
     * @return 枚举的显示名称
     */
    @Override
    public String title() {
        return this.title;
    }
    
    /**
     * 根据 int 值构建一个枚举对象
     *
     * @param value 需要构建枚举的 int 的值
     * @return 返回相应 value 值的枚举对象
     */
    public static {{.Name}} valueOf(int value) {
        return Enums.valueOf({{.Name}}.class, value);
    }
}
`

// DTO 模板
const tplMSCDto = `// Generated by the lark-cli {{.ToolVersion}}.  DO NOT EDIT!
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
package {{.Package}}.dto;

import lombok.Getter;
import lombok.Setter;
import lark.pb.field.FieldType;
import lark.pb.annotation.ProtoField;
import lark.pb.annotation.ProtoMessage;
import lark.core.encode.JsonEncoder;
{{- if .Errors}}
import lark.core.lang.ErrorInfo;
{{- end}}
{{- range .Enums}}
import {{$.Package}}.constant.{{.Name}};
{{- end}}
{{- range .Imports}}
import {{.Path}};
{{- end}}

/**
 * Dto
 */
public final class {{.Name}}Dto {
    private {{.Name}}Dto() {
    }
    {{- range .Types}}

    /**
     * {{.Description}}
     */
    @Setter
    @Getter
    @ProtoMessage(description = "{{.Description}}")
    public static class {{.Name}} {{if .Extends}}extends {{.Extends}} {{end}}{
        {{- range $i, $f := .Fields}}
        {{- if gt $i 0}}
        {{end}}
        /**
         * {{.Description}}
         */
        {{- range .Annotations}}
        @{{.}}
        {{- end}}
        @ProtoField(order = {{.Order}}, type = FieldType.{{.FieldType}}, {{if eq .Modifier "required"}}required = true, {{end}}description = "{{.Description}}")
        private {{.FullType}} {{.Name | camel}};
        {{- end}}
        {{- range .Fields}}
        {{- if eq .Modifier "repeated"}}
        
        /**
         * add item method
         *
         * @param item
         */
        public void add{{.Name | pascal}}({{.Type}} item) {
            ensure{{.Name | pascal}}();
            this.{{.Name | camel}}.add(item);
        }

        /**
         * add collection method
         *
         * @param items
         */
        public void add{{.Name | pascal}}(Collection<? extends {{.Type}}> items) {
            ensure{{.Name | pascal}}();
            this.{{.Name | camel}}.addAll(items);
        }

        private void ensure{{.Name | pascal}}() {
            if ({{.Name | camel}} == null) {
                this.{{.Name | camel}} = new ArrayList<>();
            }
        }
        {{- end -}}
        {{- end}}

        @Override
        public String toString() {
            return JsonEncoder.DEFAULT.encode(this);
        }
    }
    {{- end}}
    {{- range .Errors}}

    /**
     * {{.Description}}
     */
    public static final class {{.Name}} {
        {{- range $i, $e := .Errors}}
        {{- if gt $i 0}}
        {{end}}
        /**
         * {{.Message}}
         */
        public static final ErrorInfo {{.Name}} = ErrorInfo.of({{.Code}}, "{{.Message}}");
        {{- end}}

        private {{.Name}}() {
        }
    }
    {{- end}}
}
`

// 服务接口模板
const tplMSCService = `// Generated by the lark-cli {{.ToolVersion}}.  DO NOT EDIT!
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
package {{.Package}}.iface;

import lark.net.rpc.annotation.RpcMethod;
import lark.net.rpc.annotation.RpcService;
import lark.net.rpc.client.FailMode;
import {{.Package}}.dto.{{.Name}}Dto.*;
{{- range .Imports}}
import {{.Path}};
{{- end}}

/**
 * {{.Description}}
 */
@RpcService({{if .Alias}}name = "{{.Alias}}", {{end}}{{if .Fail}}fail = FailMode.{{.Fail}}, {{end}}description = "{{.Description}}")
public interface {{.Name}}Service {
    {{range $i, $m := .Methods}}
    {{- if gt $i 0}}
    
    {{end -}}
    /**
	 * {{.Description}}
     *
     {{- range $i, $p := .Request}}
     * @param {{.Name}}
     {{- end}}
     {{- if .Response}}
     * @return{{end}}
     */
    @RpcMethod({{if .Alias}}name = "{{.Alias}}", {{end}}{{if .Fail}}fail = FailMode.{{.Fail}}, {{end}}description = "{{.Description}}")
    {{if .Response}}{{.Response.Type}}{{else}}void{{end}} {{.Name | camel}}({{if .Request}}{{range $i, $p := .Request}}{{if gt $i 0}}, {{end}}{{.Type}} {{.Name}}{{end}}{{end}});
    {{- end}}
}
`
